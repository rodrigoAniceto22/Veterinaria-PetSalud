{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ResultadoService = /*#__PURE__*/(() => {\n  class ResultadoService {\n    http;\n    apiUrl = 'http://localhost:8080/api/resultados';\n    constructor(http) {\n      this.http = http;\n    }\n    listarTodos() {\n      return this.http.get(this.apiUrl);\n    }\n    obtenerPorId(id) {\n      return this.http.get(`${this.apiUrl}/${id}`);\n    }\n    buscarPorOrden(idOrden) {\n      return this.http.get(`${this.apiUrl}/orden/${idOrden}`);\n    }\n    obtenerValidados() {\n      return this.http.get(`${this.apiUrl}/validados`);\n    }\n    obtenerPendientes() {\n      return this.http.get(`${this.apiUrl}/pendientes`);\n    }\n    crear(resultado) {\n      return this.http.post(this.apiUrl, resultado);\n    }\n    actualizar(id, resultado) {\n      return this.http.put(`${this.apiUrl}/${id}`, resultado);\n    }\n    eliminar(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`);\n    }\n    validarResultado(id) {\n      return this.http.patch(`${this.apiUrl}/${id}/validar`, {});\n    }\n    // Alias para compatibilidad con componentes\n    validar(id) {\n      return this.validarResultado(id);\n    }\n    marcarComoEntregado(id) {\n      return this.http.patch(`${this.apiUrl}/${id}/entregar`, {});\n    }\n    generarPdf(id) {\n      return this.http.get(`${this.apiUrl}/${id}/pdf`, {\n        responseType: 'blob'\n      });\n    }\n    // Método que retorna Observable para uso en componentes\n    descargarPDF(id) {\n      return this.http.get(`${this.apiUrl}/${id}/pdf`, {\n        responseType: 'blob'\n      });\n    }\n    // Método helper para descarga directa\n    descargarPdf(id) {\n      this.generarPdf(id).subscribe(blob => {\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `resultado_${id}.pdf`;\n        link.click();\n        window.URL.revokeObjectURL(url);\n      });\n    }\n    static ɵfac = function ResultadoService_Factory(t) {\n      return new (t || ResultadoService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ResultadoService,\n      factory: ResultadoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ResultadoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}