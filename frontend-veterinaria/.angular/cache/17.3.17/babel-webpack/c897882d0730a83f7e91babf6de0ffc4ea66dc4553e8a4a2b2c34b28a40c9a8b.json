{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let NotificacionService = /*#__PURE__*/(() => {\n  class NotificacionService {\n    notificacionSubject = new Subject();\n    notificacion$ = this.notificacionSubject.asObservable();\n    constructor() {}\n    mostrar(notificacion) {\n      this.notificacionSubject.next(notificacion);\n    }\n    success(mensaje, duracion = 3000) {\n      this.mostrar({\n        tipo: 'success',\n        mensaje,\n        duracion\n      });\n    }\n    error(mensaje, duracion = 5000) {\n      this.mostrar({\n        tipo: 'error',\n        mensaje,\n        duracion\n      });\n    }\n    warning(mensaje, duracion = 4000) {\n      this.mostrar({\n        tipo: 'warning',\n        mensaje,\n        duracion\n      });\n    }\n    info(mensaje, duracion = 3000) {\n      this.mostrar({\n        tipo: 'info',\n        mensaje,\n        duracion\n      });\n    }\n    // Métodos específicos del dominio\n    exitoCrear(entidad) {\n      this.success(`${entidad} creado exitosamente`);\n    }\n    exitoActualizar(entidad) {\n      this.success(`${entidad} actualizado exitosamente`);\n    }\n    exitoEliminar(entidad) {\n      this.success(`${entidad} eliminado exitosamente`);\n    }\n    errorGeneral(mensaje) {\n      this.error(mensaje || 'Ocurrió un error. Por favor intente nuevamente');\n    }\n    errorConexion() {\n      this.error('Error de conexión con el servidor');\n    }\n    confirmarAccion(mensaje) {\n      return confirm(mensaje);\n    }\n    static ɵfac = function NotificacionService_Factory(t) {\n      return new (t || NotificacionService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificacionService,\n      factory: NotificacionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NotificacionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}